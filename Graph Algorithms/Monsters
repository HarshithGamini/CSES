#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
 
typedef long long ll;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
vector<int> dx = {1, -1, 0, 0};
vector<int> dy = {0, 0, -1, 1};
vector<char> d = {'D', 'U', 'L', 'R'};
 
bool e(int i, int j, vector<vector<char>>& grid) {
    int n = grid.size();
    int m = grid[0].size();
    return (i >= 0 && i < n && j >= 0 && j < m && grid[i][j] == '.');
}
 
void solve() {
    int n, m;
    cin >> n >> m;
    vector<vector<char>> grid(n, vector<char>(m));
    int starti = -1, startj = -1;
    for(int i = 0;i < n;i++) {
        for(int j = 0;j < m;j++) {
            cin >> grid[i][j];
            if(grid[i][j] == 'A') {
                starti = i;
                startj = j;
            }
        }
    }
    queue<vector<int>> q;
    for(int i = 0;i < n;i++) {
        for(int j = 0;j < m;j++) {
            if(grid[i][j] == 'M') {
                q.push({i, j, 0});
            }
        }
    }
    q.push({starti, startj, 1});
    vector<vector<int>> p(n, vector<int>(m, -1));
    p[starti][startj] = 0;
    while(!q.empty()) {
        auto& it = q.front();
        int i = it[0];
        int j = it[1];
        int move = it[2];
        q.pop();
 
        for(int k = 0;k < 4;k++) {
            int ni = i + dx[k];
            int nj = j + dy[k];
            if(!e(ni, nj, grid)) continue;
            grid[ni][nj] = (move == 0) ? 'M' : '#';
            if(move == 1) {
                p[ni][nj] = k;
            }
            q.push({ni, nj, move});
        }
    }
    vector<char> res;
    int endi = -1, endj = -1;
    for(int i = 0;i < n;i++) {
        for(int j = 0;j < m;j++) {
            if(i == 0 || i == n - 1 || j == 0 || j == m - 1) {
                if(p[i][j] != -1) {
                    endi = i, endj = j;
                    cout << "YES" << "\n";
                    while(endi != starti || endj != startj) {
                        int k = p[endi][endj];
                        res.push_back(d[k]);
                        if(k == 0) endi -= 1;
                        if(k == 1) endi += 1;
                        if(k == 2) endj += 1;
                        if(k == 3) endj -= 1;
                    }
                    reverse(res.begin(), res.end());
                    int sz = res.size();
                    cout << sz << "\n";
                    for(auto& r: res) {
                        cout << r;
                    }
                    return;
                }
            }
        }
    }
    cout << "NO";
}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
 
    int t = 1;
    //cin >> t;
    while(t--) {
        solve();
    }
    return 0;
}
