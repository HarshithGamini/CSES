#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
 
typedef long long ll;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
 
void solve() {
    int n, m;
    cin >> n >> m;
    vector<vector<ll>> edges;
    for(int i = 0;i < m;i++) {
        ll a, b, c;
        cin >> a >> b >> c;
        a--, b--;
        edges.push_back({a, b, c});
    }
    vector<ll> dist(n, 1e18);
    vector<ll> parent(n, -1);
    dist[0] = 0;
    int u = -1;
    for(int i = 0;i < n;i++) {
        u = -1;
        for(auto& it: edges) {
            ll a = it[0], b = it[1], c = it[2];
            if(dist[a] + c < dist[b]) {
                dist[b] = dist[a] + c;
                parent[b] = a;
                u = b;
            }
        }
    }
    
    if(u == -1) {
        cout << "NO";
    } else {
        cout << "YES" << "\n";
        for(int i = 0;i < n;i++) {
            u = parent[u];
        }
        vector<int> res;
        int v = u;
        res.push_back(u);
        u = parent[u];
        while(u != v) {
            res.push_back(u);
            u = parent[u];
        }
        res.push_back(v);
        reverse(res.begin(), res.end());
        for(auto& r: res) {
            cout << r + 1 << " ";
        }
    }
}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
 
    int t = 1;
    //cin >> t;
    while(t--) {
        solve();
    }
    return 0;
}
