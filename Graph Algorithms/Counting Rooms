#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
 
typedef long long ll;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
 
vector<int> dx = {0, 1, -1, 0};
vector<int> dy = {1, 0, 0, -1};
 
void dfs(int r, int c, vector<vector<char>>& grid, vector<vector<int>>& vis) {
    int n = grid.size();
    int m = grid[0].size();
    vis[r][c] = 1;
    for(int i = 0;i < 4;i++) {
        int nr = r + dx[i];
        int nc = c + dy[i];
        if(nr >= 0 && nr < n && nc >= 0 && nc < m && !vis[nr][nc] && grid[nr][nc] == '.') {
            dfs(nr, nc, grid, vis);
        }
    }
}
 
void solve() {
    int n, m;
    cin >> n >> m;
    vector<vector<char>> grid(n, vector<char>(m));
    for(int i = 0;i < n;i++) {
        for(int j = 0;j < m;j++) {
            cin >> grid[i][j];
        }
    }
    vector<vector<int>> vis(n, vector<int>(m, 0));
    int res = 0;
    for(int i = 0;i < n;i++) {
        for(int j = 0;j < m;j++) {
            if(!vis[i][j] && grid[i][j] == '.') {
                dfs(i, j, grid, vis);
                res++;
            }
        }
    }
    cout << res;
}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
 
    int t = 1;
    //cin >> t;
    while(t--) {
        solve();
    }
    return 0;
}
