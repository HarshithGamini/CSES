#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
 
typedef long long ll;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
 
void dfs(int u, int parent, vector<int>& p, vector<int>& vis, vector<vector<int>>& adj) {
    p[u] = parent;
    vis[u] = 1;
    for(auto& v: adj[u]) {
        if(v == parent) continue;
        if(vis[v]) {
            vector<int> res;
            int node = u;
            while(u != v) {
                res.push_back(u);
                u = p[u];
            }
            res.push_back(v);
            res.push_back(node);
            int sz = res.size();
            cout << sz << "\n";
            for(auto& r: res) {
                cout << r + 1 << " ";
            }
            exit(0);
        } else {
            dfs(v, u, p, vis, adj);
        }
    }
}
 
void solve() {
    int n, m;
    cin >> n >> m;
    vector<vector<int>> adj(n);
    for(int i = 0;i < m;i++) {
        int a, b;
        cin >> a >> b;
        a--, b--;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    vector<int> vis(n, 0);
    vector<int> p(n, -1);
    for(int i = 0;i < n;i++) {
        if(!vis[i]) {
            dfs(i, -1, p, vis, adj);
        }
    }
    cout << "IMPOSSIBLE" << "\n";
}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
 
    int t = 1;
    //cin >> t;
    while(t--) {
        solve();
    }
    return 0;
}
