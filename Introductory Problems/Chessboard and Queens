#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
 
void f(int r, set<int>& cols, set<int>& posDiag, set<int>& negDiag, vector<string>& board, vector<vector<string>>& res) {
    int n = board.size();
    if(r == n) {
        res.push_back(board);
        return;
    }
 
    for(int c = 0; c < n; c++) {
        if(cols.find(c) != cols.end() || posDiag.find(r + c) != posDiag.end() || negDiag.find(r - c) != negDiag.end() || board[r][c] == '*') {
            continue;
        }
        cols.insert(c);
        posDiag.insert(r + c);
        negDiag.insert(r - c);
        board[r][c] = 'Q';
        f(r + 1, cols, posDiag, negDiag, board, res);
        cols.erase(c);
        posDiag.erase(r + c);
        negDiag.erase(r - c);
        board[r][c] = '.';
    }
}
    
 
void solve() {
    vector<string> board;
    for(int i = 0;i < 8;i++) {
        string s;
        cin >> s;
        board.push_back(s);
    }
    vector<vector<string>> res;
    set<int> cols;
    set<int> posDiag;
    set<int> negDiag;
    f(0, cols, posDiag, negDiag, board, res);
    cout << res.size() << "\n";
 
}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
 
    int t = 1;
    //cin >> t;
    while(t--) {
        solve();
    }
    return 0;
}
